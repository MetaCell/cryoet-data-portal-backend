"""
Pydantic validator for ConstraintCheckedType

Auto-generated by running 'make codegen'. Do not edit.
Make changes to the template codegen/templates/validators/class_name.py.j2 instead.
"""

# ruff: noqa: E501 Line too long


from support.enums import NucleicAcid

import typing
import datetime
import uuid

from pydantic import BaseModel, ConfigDict, Field, StringConstraints
from typing_extensions import Annotated


class ConstraintCheckedTypeCreateInputValidator(BaseModel):
    # Pydantic stuff
    model_config = ConfigDict(from_attributes=True)
    length_3_to_8: Annotated[
        str | None,
        StringConstraints(
            strip_whitespace=True,
            min_length=3,
            max_length=8,
        ),
    ]
    field_with_spaces: Annotated[
        str | None,
        StringConstraints(
            strip_whitespace=True,
        ),
    ]
    regex_format_check: Annotated[
        str | None,
        StringConstraints(
            strip_whitespace=True,
            pattern=r"\d{3}-\d{2}-\d{4}",
        ),
    ]
    min_value_0: Annotated[
        int | None,
        Field(
            ge=0,
        ),
    ]
    enum_field: Annotated[NucleicAcid | None, Field()]
    bool_field: Annotated[bool | None, Field()]
    max_value_9: Annotated[
        int | None,
        Field(
            le=9,
        ),
    ]
    min_value_0_max_value_9: Annotated[
        int | None,
        Field(
            ge=0,
            le=9,
        ),
    ]
    float_1dot1_to_2dot2: Annotated[
        float | None,
        Field(
            ge=1.1,
            le=2.2,
        ),
    ]
    no_string_checks: Annotated[
        str | None,
        StringConstraints(
            strip_whitespace=True,
        ),
    ]
    no_int_checks: Annotated[int | None, Field()]
    no_float_checks: Annotated[float | None, Field()]
    producing_run_id: Annotated[uuid.UUID | None, Field()]
    collection_id: Annotated[
        int,
        Field(
            ge=0,
        ),
    ]
    deleted_at: Annotated[datetime.datetime | None, Field()]


class ConstraintCheckedTypeUpdateInputValidator(BaseModel):
    # Pydantic stuff
    model_config = ConfigDict(from_attributes=True)
    length_3_to_8: Annotated[
        str | None,
        StringConstraints(
            strip_whitespace=True,
            min_length=3,
            max_length=8,
        ),
    ]
    field_with_spaces: Annotated[
        str | None,
        StringConstraints(
            strip_whitespace=True,
        ),
    ]
    regex_format_check: Annotated[
        str | None,
        StringConstraints(
            strip_whitespace=True,
            pattern=r"\d{3}-\d{2}-\d{4}",
        ),
    ]
    min_value_0: Annotated[
        int | None,
        Field(
            ge=0,
        ),
    ]
    enum_field: Annotated[NucleicAcid | None, Field()]
    bool_field: Annotated[bool | None, Field()]
    max_value_9: Annotated[
        int | None,
        Field(
            le=9,
        ),
    ]
    min_value_0_max_value_9: Annotated[
        int | None,
        Field(
            ge=0,
            le=9,
        ),
    ]
    float_1dot1_to_2dot2: Annotated[
        float | None,
        Field(
            ge=1.1,
            le=2.2,
        ),
    ]
    no_string_checks: Annotated[
        str | None,
        StringConstraints(
            strip_whitespace=True,
        ),
    ]
    no_int_checks: Annotated[int | None, Field()]
    no_float_checks: Annotated[float | None, Field()]
    collection_id: Annotated[
        int | None,
        Field(
            ge=0,
        ),
    ]
    deleted_at: Annotated[datetime.datetime | None, Field()]
